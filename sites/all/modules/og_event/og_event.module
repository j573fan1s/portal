<?php
// $Id: og_event.module,v 1.1.2.3 2009/10/20 15:55:35 pounard Exp $

/**
 * @file
 * OG Event API and hook implementations.
 */

define('OG_EVENT_VIEW_LINK_IN_COMMENTS',         'og_event_view_link_in_comments');
define('OG_EVENT_VIEW_NODE_TAB',                 'og_event_view_node_tab');
define('OG_EVENT_DEFAULT_BEHAVIOR',              'og_event_default_behavior');
define('OG_EVENT_VIEW_LIST_IN_CONTENT',          'og_event_view_list_in_content');
define('OG_EVENT_VIEW_REDIRECT_AFTER_SUBSCRIBE', 'og_event_view_redirect_after_subscribe');

/**
 * Implementation of hook_menu().
 */
function og_event_menu() {
  $items = array();

  // Admin settings
  $items['admin/og/event'] = array(
    'title' => 'OG Event settings',
    'description' => 'Configure OG Event default behavior, and some UI details.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_event_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'og_event.admin.inc',
  );

  // Node tabs
  $items['node/%node/register-event'] = array(
    'page callback' => 'og_event_register_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_event_registration_access',
    'access arguments' => array(1),
    'file' => 'og_event.pages.inc',
  );
  $items['node/%node/register-event/%user'] = array(
    'page callback' => 'og_event_register_page',
    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_event_registration_access',
    'access arguments' => array(1, 3),
    'file' => 'og_event.pages.inc',
  );
  $items['node/%node/unregister-event'] = array(
    'page callback' => 'og_event_unregister_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_event_registration_access',
    'access arguments' => array(1),
    'file' => 'og_event.pages.inc',
  );
  $items['node/%node/unregister-event/%user'] = array(
    'page callback' => 'og_event_unregister_page',
    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'og_event_registration_access',
    'access arguments' => array(1, 3),
    'file' => 'og_event.pages.inc',
  );

  // Pure display
  $type = (variable_get(OG_EVENT_VIEW_NODE_TAB, FALSE) && ! variable_get(OG_EVENT_VIEW_LIST_IN_CONTENT, FALSE)) ? MENU_LOCAL_TASK : MENU_CALLBACK;
  $items['node/%node/participants'] = array(
    'title' => 'Participants',
    'page callback' => 'og_event_list_cb',
    'page arguments' => array(1),
    'type' => $type,
    'access callback' => 'og_event_is_og_event',
    'access arguments' => array(1),
    'file' => 'og_event.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_views_api().
 */
function og_event_views_api() { 
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'og_event') . '/views',
  );
}

/**
 * Implementation of hook_theme().
 */
function og_event_theme() {
  $items = array();
  $items['og_event_participants_list'] = array(
    'file' => 'og_event.pages.inc',
  );
  $items['og_event_subscribe_message'] = array(
    'file' => 'og_event.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_alter(). 
 */
function og_event_form_alter(&$form, &$form_state, $form_id) {
  // Node edit form
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    if (og_event_is_og_event($form['#node'], TRUE, TRUE)) {
      $node = $form['#node'];
      $form['og_event'] = array(
        '#title' => t('Group event settings'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['og_event']['help'] = array(
        '#type' => 'markup',
        '#value' => t(
          'Users can subscribe or unsubscribe for the event until the end date time of the event.<br/>'.
          'Once event is closed, then they won\'t be able to do any operation, except if <i>Members can edit</i> option is selected.'
        ),
      );
      $form['og_event']['og_event_open_reg'] = array(
        '#title' => t('Members can participate'),
        '#type' => 'checkbox',
        '#default_value' => $node->og_event_open_reg,
        '#description' => t('If you select this option, group members can subscribe to event participants list.'),
      );
      $form['og_event']['og_event_open_edit'] = array(
        '#title' => t('Members can edit'),
        '#type' => 'checkbox',
        '#default_value' => $node->og_event_open_edit,
        '#description' => t('If you select this option, group members can edit all the event settings.'),
      );
      $form['og_event']['og_event_open_role'] = array(
        '#title' => t('Participants can enter a role'),
        '#type' => 'checkbox',
        '#default_value' => $node->og_event_open_role,
        '#description' => t('If you select this option, participants will be able to enter the role they want to accomplish <i>(eg.: \'bring the food\')</i>.'),
      );
    }
  }
}

/**
 * Implementation of hook_link().
 */
function og_event_link($type, $node = NULL, $teaser = FALSE) {
  global $user;
  $links = array();
  if (og_event_is_og_event($node)) {
    if ($type == 'node') {
      // See links only in page mode
      if (! $teaser && og_event_user_can_register($node, $user)) {
        if (! og_event_is_user_registered($node, $user)) {
          $links['register'] = array(
            'href' => 'node/'.$node->nid.'/register-event',
            'title' => t('Subscribe'),
            'attributes' => array('class' => 'og_event_register_link'), 
          );
        }
        else {
          $links['unregister'] = array(
            'href' => 'node/'.$node->nid.'/unregister-event',
            'title' => t('Unsubscribe'),
            'attributes' => array('class' => 'og_event_unregister_link'),
          );
        }
      }
      // In teaser mode, always show the link
      $view_list_in_content = variable_get(OG_EVENT_VIEW_LIST_IN_CONTENT, FALSE);
      if ($teaser) {
        $url = $view_list_in_content ? 'node/'.$node->nid : 'node/'.$node->nid.'/participants';
        $links['see_list'] = array(
          'href' => $url,
          'title' => t('View participants'),
          'attributes' => array('class' => 'og_event_see_list_link'),
        );
      }
      // If page, we show the link only if tab is not displayed AND list is not in content
      else if (variable_get(OG_EVENT_VIEW_NODE_TAB, FALSE) && ! $view_list_in_content) {
        $links['see_list'] = array(
          'href' => 'node/'.$node->nid.'/participants',
          'title' => t('View participants'),
          'attributes' => array('class' => 'og_event_see_list_link'),
        );
      }
    }
    else if ($type == 'comment') {
      if (variable_get(OG_EVENT_VIEW_LINK_IN_COMMENTS, FALSE)) {
        // TODO get uid of user which did the comment
        $links['see_in_list'] = array(
          'href' => '',
          'title' => '',
          'fragment' => '',
        );
      }
    }
  }
  return $links;
}

/**
 * Implementation of hook_nodeapi(). 
 */
function og_event_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (og_event_is_og_event($node)) {
    if ($op == 'load') {
      if ($data = db_fetch_object(db_query("SELECT * FROM {og_event_node} WHERE nid = %d", $node->nid))) {
        return array(
          'og_event_open_reg' => $data->open_reg,
          'og_event_open_edit' => $data->open_edit,
          'og_event_open_role' => $data->open_role,
        );
      }
    }
    else if ($op == 'view') {
      if (variable_get(OG_EVENT_VIEW_LIST_IN_CONTENT, FALSE)) {
        $node->content['participants_list'] = array(
          '#value' => theme(
            'og_event_participants_list',
            $node->nid,
            og_event_get_participants_list($node),
            t('Participants')
          ),
          '#weight' => 10,
        );
      }
    }
    else if ($op == 'update') {
      _og_event_update($node);
    }
    else if ($op == 'insert') {
      _og_event_update($node);
    }
    else if ($op == 'delete') {
      _og_event_delete($node);
    }
  }
}

/**
 * Determine access right for the given operation, node and account.
 * 
 * @param object $node
 *   Node object, which must be an event nod, on which to act
 * @param object $registrant = NULL
 *   User object, person to register to event (NOT person which do the action)
 * @param object $account = NULL
 *   User object, person which do the action
 */
function og_event_registration_access($node, $registrant = NULL, $account = NULL) {
  if (! $account) {
    global $user;
    $account = $user;
  }

  if (! og_event_is_og_event($node)) {
    return FALSE;
  }

  // Does our node exists and is an event node ?
  if (! og_event_is_registration_enabled($node)) {
    return FALSE;
  }

  // Trying to register someone else, only people with update access to node can
  // register other people
  if ($registrant && $registrant->uid != $account->uid) {
    if (! node_access('update', $node, $account)) {
      return FALSE;
    }
    else {
      return og_event_user_can_register($node, $registrant);
    }
  }

  // User tries to add itself, check if he has the right to.
  else {
    return og_event_user_can_register($node, $account);
  }
}

function og_event_is_og_event($node, $node_creation = FALSE, $test = FALSE) {
  static $cache;
  if (! isset($cache)) {
    $cache = array();
  }

  $do_cache = isset($node->nid);

  if (! $do_cache || ! isset($cache[$node->nid])) {
    $success = FALSE;
    // First check this node is event type
    if (event_is_enabled($node->type)) {
      // Then check it is group post enabled
      if (og_is_group_post_type($node->type)) {
        //  Finish checks with affiliated groups
        if ($node_creation || og_get_node_groups($node)) {
          $success = TRUE;
        }
      }
    }
    if ($do_cache) {
      $cache[$node->nid] = $success;
    }
  }
  return $do_cache ? $cache[$node->nid] : $success;
}

/**
 * Simply tells if members can register to event.
 * 
 * @param object $node
 *   node object
 * @return boolean
 */
function og_event_is_registration_enabled($node) {
  return $node->og_event_open_reg;
}

/**
 * Simply tells if members can apply for a role in registration.
 * 
 * @param object $node
 *   node object
 * @return boolean
 */
function og_event_is_role_enabled($node) {
  return $node->og_event_open_role;
}

/**
 * Simply tells if all group members can edit the node.
 * 
 * @param object $node
 *   node object
 * @return boolean
 */
function og_event_is_edit_enabled($node) {
  return $node->og_event_open_edit;
}

/**
 * Tells if user is registered for event.
 * 
 * This method could be faster, but it's sufficient now.
 * 
 * @param $node
 *   node object
 * @param $user
 *   user object or uid
 * @return bool
 */
function og_event_is_user_registered($node, $user) {
  if (is_object($user)) {
    $uid = $user->uid;
  }
  else {
    $uid = $user;
  }
  $success = (bool) db_result(db_query("SELECT 1 FROM {og_event_participant} WHERE nid = %d AND uid = %d", array(
    $node->nid, $uid
  )));
  return $success;
}

/**
 * Tells if user can register for event.
 * 
 * @param $node
 *   node object
 * @param $user
 *   user object or uid
 * @return bool
 */
function og_event_user_can_register($node, $account = NULL) {
  if (! $account) {
    global $user;
    $account = $user;
  }
  // No need for context here, what's important is that our user is at least in
  // one of the event node's audience groups
  $groups = og_get_node_groups($node);
  if (! empty($groups)) foreach ($groups as $gid => &$name) {
    // Tricky usage of OG's API
    if ($user_is_group_member = (bool) in_array($gid, array_keys(og_get_subscriptions($account->uid)))) {
      return $user_is_group_member && og_event_is_registration_enabled($node);
    }
  }
  return FALSE;
}

/**
 * Tells if a user can edit this event node or not.
 * 
 * @param $node
 *   node object
 * @param $user = NULL
 *   user object or uid
 *   if NULL given, tries first if current is owner with node_access
 * @return bool
 */
function og_event_user_can_edit($node, $account = NULL) {
  if (! $account) {
    global $user;
    $account = $user;
  }

  if ($account == NULL && node_access('update', $account)) {
    // Current user && is owner (or have rights on Drupal node)
    return TRUE;
  }
  else {
    return (og_event_is_edit_enabled($node) && og_event_user_can_register($node, $account));
  }
}

/**
 * Save updated/new information from a node.
 * 
 * @param object $node
 *   node object containing og_event datas.
 * @param boolean $delete = FALSE
 *   if set to TRUE, and node is not a og_event or node is not registration
 *   enabled, then all registration data will be deleted from database.   
 */
function _og_event_update($node, $delete = FALSE) {
  if (og_event_is_og_event($node)) {
    if (db_result(db_query("SELECT 1 FROM {og_event_node} WHERE nid = %d LIMIT 1", $node->nid))) {
      // Node update
      db_query("UPDATE {og_event_node} SET open_reg = %b, open_edit = %d, open_role = %b WHERE nid = %d", array(
        $node->og_event_open_reg,
        $node->og_event_open_edit,
        $node->og_event_open_role,
        $node->nid,
      ));
    }
    else {
      // Node insert or registration just set to TRUE
      db_query("INSERT INTO {og_event_node} (open_reg, open_edit, open_role, nid) VALUES (%b, %b, %b, %d)", array(
        $node->og_event_open_reg,
        $node->og_event_open_edit,
        $node->og_event_open_role,
        $node->nid,
      ));
    }
  }
  else if ($delete) {
    // No chances of gettings backwards, suppress all data for this node
    _og_event_delete($node);
  }
}

function _og_event_delete($node) {
  db_query("DELETE FROM {og_event_node} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {og_event_participant} WHERE nid = %d", $node->nid);
}

function _og_event_register_user($node, $user, $role) {
  if (og_event_is_registration_enabled($node)) {
    if (! og_event_is_user_registered($node, $user)) {
      db_query("INSERT INTO {og_event_participant} (nid, uid, role) VALUES (%d, %d, '%s')", array(
        $node->nid, $user->uid, $role
      ));
    }
  }
}

function _og_event_unregister_user($node, $user) {
  db_query("DELETE FROM {og_event_participant} WHERE nid = %d AND uid = %d", array(
    $node->nid, $user->uid
  ));
}

function og_event_get_participants_list($node) {
  $participants = array();
  $result = db_query("SELECT uid,role FROM {og_event_participant} WHERE nid = %d", $node->nid);
  while ($object = db_fetch_object($result)) {
    $participants[$object->uid] = $object->role;
  }
  return $participants;
}
